{
	"name": "1a_pl_source_mysql_ingestion",
	"properties": {
		"activities": [
			{
				"name": "metadata_lookup_from_databricks",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureDatabricksDeltaLakeSource",
						"query": {
							"value": "@concat('select control.source_ref_id,control.job_id, param.source_file_or_table_name, control.storage_account, control.adls_url, control.container_name, control.logic_app_url, control.email_id, param.adls_file_path, param.bronze_schema, param.bronze_tbl, param.silver_schema, param.silver_tbl, param.gold_schema, param.gold_tbl from ', pipeline().parameters.metadata_database, '.tbl_source_control as control join ', pipeline().parameters.metadata_database, '.tbl_parameters as param on control.job_id = param.job_id where param.job_id = ', pipeline().parameters.job_id)\n",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "ds_metadat_adb_deltalake",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "for each file",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "metadata_lookup_from_databricks",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "pipeline_start_time",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('metadata_lookup_from_databricks').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "copy_table_records",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_input_sqldb",
									"type": "DatasetReference",
									"parameters": {
										"tablename": {
											"value": "@item().source_file_or_table_name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_output_parquet",
									"type": "DatasetReference",
									"parameters": {
										"container_name": {
											"value": "@item().container_name",
											"type": "Expression"
										},
										"adls_file_path": {
											"value": "@item().adls_file_path",
											"type": "Expression"
										},
										"table_name": {
											"value": "@item().source_file_or_table_name",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "copy_success_log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "copy_table_records",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/databricks_notebooks/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('Copied ',item().source_file_or_table_name,' table to adls landing container')",
										"type": "Expression"
									},
									"status": {
										"value": "success",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "copy_failure_log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "copy_table_records",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/databricks_notebooks/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('Failed to copy ',item().source_file_or_table_name,' table to adls landing container')",
										"type": "Expression"
									},
									"status": {
										"value": "@concat('Error: ',activity('copy_table_records').Error.message)",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "compare records count",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "copy_table_records",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(activity('copy_table_records').output.rowsRead, activity('copy_table_records').output.rowsCopied)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "record_mismatch_log",
										"type": "DatabricksNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/databricks_notebooks/log_record_tbl_insert",
											"baseParameters": {
												"env": {
													"value": "@pipeline().globalParameters.env",
													"type": "Expression"
												},
												"pipeLineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"logMessage": {
													"value": "@concat(string(sub(int(activity('copy_table_records').output.rowsRead),int(activity('copy_table_records').output.rowsCopied))),' records not copied to adls landing container from ',item().source_file_or_table_name)",
													"type": "Expression"
												},
												"status": {
													"value": "success",
													"type": "Expression"
												},
												"triggerType": {
													"value": "@pipeline().TriggerType",
													"type": "Expression"
												},
												"loadId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"logTimeStamp": {
													"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "ls_databricks_compute",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "fail_file_ingestion",
										"type": "Fail",
										"dependsOn": [
											{
												"activity": "record_mismatch_log",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"message": {
												"value": "@concat(string(sub(int(activity('copy_table_records').output.rowsRead),int(activity('copy_table_records').output.rowsCopied))),' records not copied to adls landing container from ',item().source_file_or_table_name)",
												"type": "Expression"
											},
											"errorCode": "record_mismatch"
										}
									}
								]
							}
						},
						{
							"name": "Trigger pl_mysql_landing_to_bronze",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "compare records count",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "2a_pl_mysql_landing_to_bronze",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"metadata_parameters": {
										"value": "@item()",
										"type": "Expression"
									},
									"pipeline_start_time": {
										"value": "@variables('start_time')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "archive_source_file",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "Trigger pl_mysql_landing_to_bronze",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/set_up/archive/archive_source_files",
								"baseParameters": {
									"LoadID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"source_file_name": {
										"value": "@item().source_file_or_table_name",
										"type": "Expression"
									},
									"storage_account_name": {
										"value": "@item().storage_account",
										"type": "Expression"
									},
									"file_path": {
										"value": "@item().adls_file_path",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "archive_copy_success_log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "archive_source_file",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/databricks_notebooks/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('Archived source file ',item().source_file_or_table_name)",
										"type": "Expression"
									},
									"status": {
										"value": "success",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "archive_copy_failure_log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "archive_source_file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/databricks_notebooks/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('Failed to archive ',item().source_file_or_table_name)",
										"type": "Expression"
									},
									"status": {
										"value": "@concat('Error: ',activity('archive_source_file').Error.message)",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Trigger 3_pl_bronze_to_silver",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Trigger pl_mysql_landing_to_bronze",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "3_pl_bronze_to_silver",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"metadata_parameters": {
										"value": "@item()",
										"type": "Expression"
									},
									"pipeline_start_time": {
										"value": "@variables('start_time')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Trigger 4_pl_silver_to_gold",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Trigger 3_pl_bronze_to_silver",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "4_pl_silver_to_gold",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"metadata_parameters": {
										"value": "@item()",
										"type": "Expression"
									},
									"pipeline_start_time": {
										"value": "@variables('start_time')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "copy_fail_mail_alert",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "copy_table_records",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"url": {
									"value": "@item().logic_app_url",
									"type": "Expression"
								},
								"body": {
									"value": "{\n    \"to\":\"@{item().email_id}\",\n    \"subject\":\" @{concat('[',pipeline().globalParameters.env,']',pipeline().Pipeline,':[Source file copy failed]')}\",\n    \"email_body\":\"\n   \n    <!DOCTYPE html>\n<html>\n<body>\n    Hi all,<br/>\n    Please find below the status for @{pipeline().Pipeline}<br/><br/>\n    \n    <table>\n        <tr>\n            <th style='text-align: left;'>Parameters</th>\n            <th style='text-align: left;'>Value</th>\n        </tr>\n        <tr>\n            <td>JobID</td>\n            <td>@{pipeline().parameters.job_id}</td>\n        </tr>\n        <tr>\n            <td>Status</td>\n            <td><span style='color:Red';>In Progress</span></td>\n        </tr>\n        <tr>\n            <td>Scheduled</td>\n            <td>@{pipeline().TriggerType}</td>\n        </tr>\n        <tr>\n            <td>LoadID</td>\n            <td>@{pipeline().RunId}</td>\n        </tr>\n        <tr>\n            <td>JobStart</td>\n            <td>@{variables('start_time')}</td>\n        </tr>\n            <td>FileName</td>\n            <td>@{item().source_file_or_table_name}</td>\n        </tr>\n        </tr>\n            <td>Error</td>\n            <td>@{activity('copy_table_records').Error.message}</td>\n        </tr>\n    </table><br/><br/><br/>\n    \n    <p>Clever Studies team.</p>\n</body>\n</html>\n    \"\n}\n\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "archive_source_file_fail_mail_alert",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "archive_source_file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"url": {
									"value": "@item().logic_app_url",
									"type": "Expression"
								},
								"body": {
									"value": "{\n    \"to\":\"@{item().email_id}\",\n    \"subject\":\" @{concat('[',pipeline().globalParameters.env,']',pipeline().Pipeline,':[Aarchive Source File Failed]')}\",\n    \"email_body\":\"\n   \n    <!DOCTYPE html>\n<html>\n<body>\n    Hi all,<br/>\n    Please find below the status for @{pipeline().Pipeline}<br/><br/>\n    \n    <table>\n        <tr>\n            <th style='text-align: left;'>Parameters</th>\n            <th style='text-align: left;'>Value</th>\n        </tr>\n        <tr>\n            <td>JobID</td>\n            <td>@{pipeline().parameters.job_id}</td>\n        </tr>\n        <tr>\n            <td>Status</td>\n            <td><span style='color:Red';>In Progress</span></td>\n        </tr>\n        <tr>\n            <td>Scheduled</td>\n            <td>@{pipeline().TriggerType}</td>\n        </tr>\n        <tr>\n            <td>LoadID</td>\n            <td>@{pipeline().RunId}</td>\n        </tr>\n        <tr>\n            <td>JobStart</td>\n            <td>@{variables('start_time')}</td>\n        </tr>\n            <td>FileName</td>\n            <td>@{item().source_file_or_table_name}</td>\n        </tr>\n        </tr>\n            <td>Error</td>\n            <td>@{activity('archive_source_file').Error.message}</td>\n        </tr>\n    </table><br/><br/><br/>\n    \n    <p>Clever Studies team.</p>\n</body>\n</html>\n    \"\n}\n\n",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "pipeline_success_log",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "for each file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/databricks_notebooks/log_record_tbl_insert",
					"baseParameters": {
						"env": {
							"value": "@pipeline().globalParameters.env",
							"type": "Expression"
						},
						"pipeLineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logMessage": {
							"value": "Pipeline ran successfully",
							"type": "Expression"
						},
						"status": {
							"value": "success",
							"type": "Expression"
						},
						"triggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"loadId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"logTimeStamp": {
							"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_databricks_compute",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "pipeline_failure_log",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "for each file",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/shubhamkapadnis1997@gmail.com/databricks_notebooks/log_record_tbl_insert",
					"baseParameters": {
						"env": {
							"value": "@pipeline().globalParameters.env",
							"type": "Expression"
						},
						"pipeLineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logMessage": {
							"value": "Pipeline failed",
							"type": "Expression"
						},
						"status": {
							"value": "failure",
							"type": "Expression"
						},
						"triggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"loadId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"logTimeStamp": {
							"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_databricks_compute",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "pipeline_start_time",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "start_time",
					"value": {
						"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'),'yyyy-MM-dd HH:mm:ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "pipeline_inprogress_mail",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "metadata_lookup_from_databricks",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": {
						"value": "@activity('metadata_lookup_from_databricks').output.value[0].logic_app_url",
						"type": "Expression"
					},
					"body": {
						"value": "{\n    \"to\":\"@{activity('metadata_lookup_from_databricks').output.value[0].email_id}\",\n    \"subject\":\" @{concat('[',pipeline().globalParameters.env,']',pipeline().Pipeline,':[InProgress]')}\",\n    \"email_body\":\"\n   \n    <!DOCTYPE html>\n<html>\n<body>\n    Hi all,<br/>\n    Please find below the status for @{pipeline().Pipeline}<br/><br/>\n    \n    <table>\n        <tr>\n            <th style='text-align: left;'>Parameters</th>\n            <th style='text-align: left;'>Value</th>\n        </tr>\n        <tr>\n            <td>JobID</td>\n            <td>@{pipeline().parameters.job_id}</td>\n        </tr>\n        <tr>\n            <td>Status</td>\n            <td><span style='color:Red';>In Progress</span></td>\n        </tr>\n        <tr>\n            <td>Scheduled</td>\n            <td>@{pipeline().TriggerType}</td>\n        </tr>\n        <tr>\n            <td>LoadID</td>\n            <td>@{pipeline().RunId}</td>\n        </tr>\n        <tr>\n            <td>JobStart</td>\n            <td>@{variables('start_time')}</td>\n        </tr>\n    </table><br/><br/><br/>\n    \n    <p>Clever Studies team.</p>\n</body>\n</html>\n    \"\n}\n\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "pipeline_success_mail_alert",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "for each file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": {
						"value": "@activity('metadata_lookup_from_databricks').output.value[0].logic_app_url",
						"type": "Expression"
					},
					"body": {
						"value": "{\n    \"to\":\"@{activity('metadata_lookup_from_databricks').output.value[0].email_id}\",\n    \"subject\":\" @{concat('[',pipeline().globalParameters.env,']',pipeline().Pipeline,':[Completed]')}\",\n    \"email_body\":\"\n   \n    <!DOCTYPE html>\n<html>\n<body>\n    Hi all,<br/>\n    Please find below the status for @{pipeline().Pipeline}<br/><br/>\n    \n    <table>\n        <tr>\n            <th style='text-align: left;'>Parameters</th>\n            <th style='text-align: left;'>Value</th>\n        </tr>\n        <tr>\n            <td>JobID</td>\n            <td>@{pipeline().parameters.job_id}</td>\n        </tr>\n        <tr>\n            <td>Status</td>\n            <td><span style='color:Green';>Completed</span></td>\n        </tr>\n        <tr>\n            <td>Scheduled</td>\n            <td>@{pipeline().TriggerType}</td>\n        </tr>\n        <tr>\n            <td>LoadID</td>\n            <td>@{pipeline().RunId}</td>\n        </tr>\n        <tr>\n            <td>JobStart</td>\n            <td>@{variables('start_time')}</td>\n        </tr>\n        <tr>\n            <td>JobEnd</td>\n            <td>@{formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')\n}</td>\n        </tr>\n    </table><br/><br/><br/>\n    \n    <p>Clever Studies team.</p>\n</body>\n</html>\n    \"\n}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "pipeline_fail_mail_alert",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "for each file",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": {
						"value": "@activity('metadata_lookup_from_databricks').output.value[0].logic_app_url",
						"type": "Expression"
					},
					"body": {
						"value": "{\n    \"to\":\"@{activity('metadata_lookup_from_databricks').output.value[0].email_id}\",\n    \"subject\":\" @{concat('[',pipeline().globalParameters.env,']',pipeline().Pipeline,':[Failed]')}\",\n    \"email_body\":\"\n   \n    <!DOCTYPE html>\n<html>\n<body>\n    Hi all,<br/>\n    Please find below the status for @{pipeline().Pipeline}<br/><br/>\n    \n    <table>\n        <tr>\n            <th style='text-align: left;'>Parameters</th>\n            <th style='text-align: left;'>Value</th>\n        </tr>\n        <tr>\n            <td>JobID</td>\n            <td>@{pipeline().parameters.job_id}</td>\n        </tr>\n        <tr>\n            <td>Status</td>\n            <td><span style='color:Red';>Failed</span></td>\n        </tr>\n        <tr>\n            <td>Scheduled</td>\n            <td>@{pipeline().TriggerType}</td>\n        </tr>\n        <tr>\n            <td>LoadID</td>\n            <td>@{pipeline().RunId}</td>\n        </tr>\n        <tr>\n            <td>JobStart</td>\n            <td>@{variables('start_time')}</td>\n        </tr>\n        <tr>\n            <td>JobEnd</td>\n            <td>@{formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')\n}</td>\n        </tr>\n    </table><br/><br/><br/>\n    \n    <p>Clever Studies team.</p>\n</body>\n</html>\n    \"\n}",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"job_id": {
				"type": "string",
				"defaultValue": "102"
			},
			"metadata_database": {
				"type": "string",
				"defaultValue": "metadata_schema"
			}
		},
		"variables": {
			"start_time": {
				"type": "String"
			}
		},
		"annotations": []
	}
}